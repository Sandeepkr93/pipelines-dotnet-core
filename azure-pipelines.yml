# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 3.0.x
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Release' # Update this to match your need

# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'myWebsiteName'

- task: PackerBuild@1
  displayName: 'Build immutable image'
  inputs:
    ConnectedServiceName: 'Free Trial (2f72acfe-9510-43e3-aefe-055dea85635a)'
    managedImageName: VMDisk
    location: eastus
    storageAccountName: strggrp2345678
    azureResourceGroup: myRsGroup
    packagePath: '$(Build.ArtifactStagingDirectory)'
    deployScriptPath: 'deploy/**/scripts/windows/deploy.ps1'
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'Free Trial (2f72acfe-9510-43e3-aefe-055dea85635a)'
    ScriptType: 'InlineScript'
    Inline: |
      # get the VMSS model
      
      $vmss = Get-AzureRmVmss -ResourceGroupName resource_group_name -VMScaleSetName VM_scale_set_name
      
      # set the new version in the model data
      
      $vmss.virtualMachineProfile.storageProfile.osDisk.image.uri="$(bakedImageUrl)"
      
      # update the virtual machine scale set model
      
      Update-AzureRmVmss -ResourceGroupName resource_group_name -Name resource_group_name -VirtualMachineScaleSet $vmss
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'